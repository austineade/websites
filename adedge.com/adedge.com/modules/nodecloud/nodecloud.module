<?php
// $Id: nodecloud.module,v 1.1 2007/06/26 18:10:04 mfredrickson Exp $

define(NODECLOUD_MIN, .8);
define(NODECLOUD_MAX, 2.5);

/**
 * Implementation of hook_menu().
 */
function nodecloud_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/nodecloud',
      'title' => t('Node Cloud'),
      'description' => t('Set the site wide settings for Node Cloud'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'nodecloud_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM
    );
  }
  return $items;
}

function nodecloud_settings() {
  $form['nodecloud_min'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum font size (in "EM" units)'),
    '#default_value' => variable_get('nodecloud_min', NODECLOUD_MIN)
    );
  $form['nodecloud_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum font size (in "EM" units)'),
    '#default_value' => variable_get('nodecloud_max', NODECLOUD_MAX)
    );
  return system_settings_form($form);
}

function nodecloud_settings_validate($id, $form) {
  //dpr($form);
  if ($form['nodecloud_min'] == 0) {
    form_set_error('nodecloud_min', t("You can not use 0 as a minimum value"));
  }
  if ($form['nodecloud_max'] <= $form['nodecloud_min']) {
    form_set_error('nodecloud_max', t("The maximum value must be greater than the minimim value"));
  }
}
/**
 *  Implementation of hook_views_style_plugins()
 */
function nodecloud_views_style_plugins() {
  $plugins = array();
  $plugins['nodecloud'] = array(
    'name' => t('Node Cloud'),
    'theme' => 'nodecloud_display',
    'summary_theme' => 'nodecloud_display',
    'needs_fields' => true,
  );
  return $plugins;
}

function theme_nodecloud_display(&$view, &$items, $type) {

  // detect if the second sort field is something that we'll get back
  if (isset($view->sort[1])) {
    $sort_field = strtr($view->sort[1]['field'], '.', '_');
    $is = (array) $items[0];
    if (array_key_exists($sort_field, $is)) {
      $size_by = $sort_field;
      $order_by = $view->sort[1]['sortorder'];
    }
  }
  
  // if we couldn't set $size_by, see if there is a numeric result in the first item's fields
  if (!isset($size_by)) {
    foreach($items[0] as $key => $field) {
      if (is_numeric($field)) {
        $size_by = $key;
        $order_by = 'DESC';
        break;
      }
    }
  }
  
  if (!isset($size_by)) {
    $size_by = 'nid'; // guaranteed to be in every view
    $order_by = 'DESC';
  }
  
  $fields = _views_get_fields();
  
  $total = count($items);
  $half_way = ceil($total/2);

  // find the min and max values of the $size_by field
  foreach($items as $key => $item) {
    $sizes[] = $item->$size_by;
  }
  
  if ($order_by == 'DESC') {
    $realmax = max($sizes);
    $realmin = min($sizes);
  } else {
    $realmax = min($sizes);
    $realmin = max($sizes);
  }

  if (!isset($realmax)) {
    $realmax = 0;
  }
  
  if (!isset($realmin)) {
    $realmin = 0;
  }
  
  if (($realmax - $realmin) == 0) {
    $realmax += 1; // fudge factor incase things go badly....
  }
  
  // resize max and min on to the range of text sizes we've defined
  $localmax = variable_get('nodecloud_max', NODECLOUD_MAX);
  $localmin = variable_get('nodecloud_min', NODECLOUD_MIN);
  
  $strengths = array();
  
  foreach($items as $key => $item) {
    $strength = ((($localmax - $localmin) * (($item->$size_by - $realmin) / ($realmax - $realmin))) / $localmin) + $localmin ;
    $strengths[$key]['item'] = $item;
    $strengths[$key]['em'] = $strength;
  }
  
  //ksort($strengths); // get this array in the correct order, centered around the top item
  $clouds = '';
  // lifted from the list view theme
  foreach ($strengths as $unit) {
    $node = $unit['item'];
    $cloud = '';
    foreach ($view->field as $field) {
      if ($fields[$field['id']]['visible'] !== FALSE) {
        if ($field['label']) {
          $cloud .= "<span class='view-label ". views_css_safe('view-label-'. $field['queryname']) ."'>" . $field['label'] . "</span> ";
        }
        $cloud .= "<span class='view-field ". views_css_safe('view-data-'. $field['queryname']) ."'>" . views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view) . "</span> ";
      }
    }
    if (!trim($cloud)) {
      $loaded = node_load($node->nid);
      $cloud = l($loaded->title, 'node/' . $loaded->nid);
    }
    $clouds .= "<span style ='font-size: ". $unit['em']."em' class='view-item ". views_css_safe('view-item-'. $view->name) ."'>$cloud</span> \n"; // l($node->title, "node/$node->nid");
  }
  
  if ($clouds) {
    drupal_add_css(drupal_get_path('module', 'nodecloud') . '/nodecloud.css');
    return '<div style = "line-height: '. ($localmax) . 'em" class = "nodecloud-cloud">' . $clouds . '</div>';
  }
}

